# Generated by Django 4.2.7 on 2025-10-20 07:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Required. Email address for the user account",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="User first name",
                        max_length=150,
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="User last name",
                        max_length=150,
                        verbose_name="last name",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="User phone number",
                        max_length=20,
                        null=True,
                        verbose_name="phone number",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="User date of birth",
                        null=True,
                        verbose_name="date of birth",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into the admin site",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user has verified their email address",
                        verbose_name="email verified",
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the last login",
                        null=True,
                        verbose_name="last login IP",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Unique token for password reset",
                        max_length=255,
                        unique=True,
                        verbose_name="token",
                    ),
                ),
                (
                    "is_used",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the token has been used",
                        verbose_name="is used",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="Token expiration date and time",
                        verbose_name="expires at",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User associated with this reset token",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "password reset token",
                "verbose_name_plural": "password reset tokens",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["token"], name="authenticat_token_3288c7_idx"),
                    models.Index(
                        fields=["user", "is_used"],
                        name="authenticat_user_id_9751b1_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EmailVerificationToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Unique token for email verification",
                        max_length=255,
                        unique=True,
                        verbose_name="token",
                    ),
                ),
                (
                    "is_used",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the token has been used",
                        verbose_name="is used",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="Token expiration date and time",
                        verbose_name="expires at",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User associated with this verification token",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_verification_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "email verification token",
                "verbose_name_plural": "email verification tokens",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["token"], name="authenticat_token_e79b2f_idx"),
                    models.Index(
                        fields=["user", "is_used"],
                        name="authenticat_user_id_456fdd_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="authenticat_email_d74434_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_active", "is_email_verified"],
                name="authenticat_is_acti_1a4cef_idx",
            ),
        ),
    ]
